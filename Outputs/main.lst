                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _tick_wireless
                                     13 	.globl _blackout
                                     14 	.globl _tick_led
                                     15 	.globl _power_heater
                                     16 	.globl _tick_fogger
                                     17 	.globl _tick_ui
                                     18 	.globl _exe_command
                                     19 	.globl _save_load_settings
                                     20 	.globl _CPRL2
                                     21 	.globl _CT2
                                     22 	.globl _TR2
                                     23 	.globl _EXEN2
                                     24 	.globl _TCLK
                                     25 	.globl _RCLK
                                     26 	.globl _REN
                                     27 	.globl _SM2
                                     28 	.globl _SM1
                                     29 	.globl _SM0
                                     30 	.globl _RCK
                                     31 	.globl _SER
                                     32 	.globl _SCK
                                     33 	.globl _RI
                                     34 	.globl _ES
                                     35 	.globl _ET0
                                     36 	.globl _EA
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _P2_7
                                     46 	.globl _P2_6
                                     47 	.globl _P2_5
                                     48 	.globl _P2_4
                                     49 	.globl _P2_3
                                     50 	.globl _P2_2
                                     51 	.globl _P2_1
                                     52 	.globl _P2_0
                                     53 	.globl _P1_7
                                     54 	.globl _P1_6
                                     55 	.globl _P1_5
                                     56 	.globl _P1_4
                                     57 	.globl _P1_3
                                     58 	.globl _P1_2
                                     59 	.globl _P1_1
                                     60 	.globl _P1_0
                                     61 	.globl _P0_7
                                     62 	.globl _P0_6
                                     63 	.globl _P0_5
                                     64 	.globl _P0_4
                                     65 	.globl _P0_3
                                     66 	.globl _P0_2
                                     67 	.globl _P0_1
                                     68 	.globl _P0_0
                                     69 	.globl _IAP_ADRH
                                     70 	.globl _IAP_ADRL
                                     71 	.globl _IAPEN
                                     72 	.globl _TH0
                                     73 	.globl _TL0
                                     74 	.globl _CKCON
                                     75 	.globl _TMOD
                                     76 	.globl _TCON
                                     77 	.globl _PWMDATA17L
                                     78 	.globl _PWMDATA17H
                                     79 	.globl _PWMDATA14L
                                     80 	.globl _PWMDATA14H
                                     81 	.globl _PWMDATA11L
                                     82 	.globl _PWMDATA11H
                                     83 	.globl _PWM_EA2
                                     84 	.globl _PWM_EA1
                                     85 	.globl _SBUF
                                     86 	.globl _TL3
                                     87 	.globl _TH3
                                     88 	.globl _T2CON
                                     89 	.globl _RCAP2H
                                     90 	.globl _RCAP2L
                                     91 	.globl _SCON
                                     92 	.globl _P1_OPT
                                     93 	.globl _ADCVAL2
                                     94 	.globl _ADCVAL1
                                     95 	.globl _ADCSEL
                                     96 	.globl _EXIF
                                     97 	.globl _EIE
                                     98 	.globl _IE
                                     99 	.globl _P3
                                    100 	.globl _P2
                                    101 	.globl _P1
                                    102 	.globl _P0
                                    103 	.globl _PCLKSEL
                                    104 	.globl _CHIPCON
                                    105 ;--------------------------------------------------------
                                    106 ; special function registers
                                    107 ;--------------------------------------------------------
                                    108 	.area RSEG    (ABS,DATA)
      000000                        109 	.org 0x0000
                           0000BF   110 _CHIPCON	=	0x00bf
                           0000B7   111 _PCLKSEL	=	0x00b7
                           000080   112 _P0	=	0x0080
                           000090   113 _P1	=	0x0090
                           0000A0   114 _P2	=	0x00a0
                           0000B0   115 _P3	=	0x00b0
                           0000A8   116 _IE	=	0x00a8
                           0000E8   117 _EIE	=	0x00e8
                           000091   118 _EXIF	=	0x0091
                           0000DA   119 _ADCSEL	=	0x00da
                           0000DB   120 _ADCVAL1	=	0x00db
                           0000DC   121 _ADCVAL2	=	0x00dc
                           0000D9   122 _P1_OPT	=	0x00d9
                           000098   123 _SCON	=	0x0098
                           0000CA   124 _RCAP2L	=	0x00ca
                           0000CB   125 _RCAP2H	=	0x00cb
                           0000C8   126 _T2CON	=	0x00c8
                           00009B   127 _TH3	=	0x009b
                           00009A   128 _TL3	=	0x009a
                           000099   129 _SBUF	=	0x0099
                           0000D3   130 _PWM_EA1	=	0x00d3
                           0000D4   131 _PWM_EA2	=	0x00d4
                           0000BD   132 _PWMDATA11H	=	0x00bd
                           0000BE   133 _PWMDATA11L	=	0x00be
                           0000B5   134 _PWMDATA14H	=	0x00b5
                           0000B6   135 _PWMDATA14L	=	0x00b6
                           0000AD   136 _PWMDATA17H	=	0x00ad
                           0000AE   137 _PWMDATA17L	=	0x00ae
                           000088   138 _TCON	=	0x0088
                           000089   139 _TMOD	=	0x0089
                           00008E   140 _CKCON	=	0x008e
                           00008A   141 _TL0	=	0x008a
                           00008C   142 _TH0	=	0x008c
                           0000E4   143 _IAPEN	=	0x00e4
                           0000E5   144 _IAP_ADRL	=	0x00e5
                           0000E6   145 _IAP_ADRH	=	0x00e6
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0_0	=	0x0080
                           000081   152 _P0_1	=	0x0081
                           000082   153 _P0_2	=	0x0082
                           000083   154 _P0_3	=	0x0083
                           000084   155 _P0_4	=	0x0084
                           000085   156 _P0_5	=	0x0085
                           000086   157 _P0_6	=	0x0086
                           000087   158 _P0_7	=	0x0087
                           000090   159 _P1_0	=	0x0090
                           000091   160 _P1_1	=	0x0091
                           000092   161 _P1_2	=	0x0092
                           000093   162 _P1_3	=	0x0093
                           000094   163 _P1_4	=	0x0094
                           000095   164 _P1_5	=	0x0095
                           000096   165 _P1_6	=	0x0096
                           000097   166 _P1_7	=	0x0097
                           0000A0   167 _P2_0	=	0x00a0
                           0000A1   168 _P2_1	=	0x00a1
                           0000A2   169 _P2_2	=	0x00a2
                           0000A3   170 _P2_3	=	0x00a3
                           0000A4   171 _P2_4	=	0x00a4
                           0000A5   172 _P2_5	=	0x00a5
                           0000A6   173 _P2_6	=	0x00a6
                           0000A7   174 _P2_7	=	0x00a7
                           0000B0   175 _P3_0	=	0x00b0
                           0000B1   176 _P3_1	=	0x00b1
                           0000B2   177 _P3_2	=	0x00b2
                           0000B3   178 _P3_3	=	0x00b3
                           0000B4   179 _P3_4	=	0x00b4
                           0000B5   180 _P3_5	=	0x00b5
                           0000B6   181 _P3_6	=	0x00b6
                           0000B7   182 _P3_7	=	0x00b7
                           0000AF   183 _EA	=	0x00af
                           0000A9   184 _ET0	=	0x00a9
                           0000AC   185 _ES	=	0x00ac
                           000098   186 _RI	=	0x0098
                           000093   187 _SCK	=	0x0093
                           000095   188 _SER	=	0x0095
                           000092   189 _RCK	=	0x0092
                           00009F   190 _SM0	=	0x009f
                           00009E   191 _SM1	=	0x009e
                           00009D   192 _SM2	=	0x009d
                           00009C   193 _REN	=	0x009c
                           0000CD   194 _RCLK	=	0x00cd
                           0000CC   195 _TCLK	=	0x00cc
                           0000CB   196 _EXEN2	=	0x00cb
                           0000CA   197 _TR2	=	0x00ca
                           0000C9   198 _CT2	=	0x00c9
                           0000C8   199 _CPRL2	=	0x00c8
                                    200 ;--------------------------------------------------------
                                    201 ; overlayable register banks
                                    202 ;--------------------------------------------------------
                                    203 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        204 	.ds 8
                                    205 ;--------------------------------------------------------
                                    206 ; internal ram data
                                    207 ;--------------------------------------------------------
                                    208 	.area DSEG    (DATA)
                                    209 ;--------------------------------------------------------
                                    210 ; overlayable items in internal ram 
                                    211 ;--------------------------------------------------------
                                    212 ;--------------------------------------------------------
                                    213 ; Stack segment in internal ram 
                                    214 ;--------------------------------------------------------
                                    215 	.area	SSEG
      000000                        216 __start__stack:
      000000                        217 	.ds	1
                                    218 
                                    219 ;--------------------------------------------------------
                                    220 ; indirectly addressable internal ram data
                                    221 ;--------------------------------------------------------
                                    222 	.area ISEG    (DATA)
                                    223 ;--------------------------------------------------------
                                    224 ; absolute internal ram data
                                    225 ;--------------------------------------------------------
                                    226 	.area IABS    (ABS,DATA)
                                    227 	.area IABS    (ABS,DATA)
                                    228 ;--------------------------------------------------------
                                    229 ; bit data
                                    230 ;--------------------------------------------------------
                                    231 	.area BSEG    (BIT)
                                    232 ;--------------------------------------------------------
                                    233 ; paged external ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area PSEG    (PAG,XDATA)
                                    236 ;--------------------------------------------------------
                                    237 ; external ram data
                                    238 ;--------------------------------------------------------
                                    239 	.area XSEG    (XDATA)
                                    240 ;--------------------------------------------------------
                                    241 ; absolute external ram data
                                    242 ;--------------------------------------------------------
                                    243 	.area XABS    (ABS,XDATA)
                                    244 ;--------------------------------------------------------
                                    245 ; external initialized ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area XISEG   (XDATA)
                                    248 	.area HOME    (CODE)
                                    249 	.area GSINIT0 (CODE)
                                    250 	.area GSINIT1 (CODE)
                                    251 	.area GSINIT2 (CODE)
                                    252 	.area GSINIT3 (CODE)
                                    253 	.area GSINIT4 (CODE)
                                    254 	.area GSINIT5 (CODE)
                                    255 	.area GSINIT  (CODE)
                                    256 	.area GSFINAL (CODE)
                                    257 	.area CSEG    (CODE)
                                    258 ;--------------------------------------------------------
                                    259 ; interrupt vector 
                                    260 ;--------------------------------------------------------
                                    261 	.area HOME    (CODE)
      000000                        262 __interrupt_vect:
      000000 02r00r00         [24]  263 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  264 	reti
      000004                        265 	.ds	7
      00000B 02r00r00         [24]  266 	ljmp	_wirelessBreakDetectISR
      00000E                        267 	.ds	5
      000013 32               [24]  268 	reti
      000014                        269 	.ds	7
      00001B 32               [24]  270 	reti
      00001C                        271 	.ds	7
      000023 02r00r00         [24]  272 	ljmp	_dmxReceiveByteISR
      000026                        273 	.ds	5
      00002B 32               [24]  274 	reti
      00002C                        275 	.ds	7
      000033 32               [24]  276 	reti
      000034                        277 	.ds	7
      00003B 32               [24]  278 	reti
      00003C                        279 	.ds	7
      000043 02r00r00         [24]  280 	ljmp	_dmxBreakDetectedISR
                                    281 ;--------------------------------------------------------
                                    282 ; global & static initialisations
                                    283 ;--------------------------------------------------------
                                    284 	.area HOME    (CODE)
                                    285 	.area GSINIT  (CODE)
                                    286 	.area GSFINAL (CODE)
                                    287 	.area GSINIT  (CODE)
                                    288 	.globl __sdcc_gsinit_startup
                                    289 	.globl __sdcc_program_startup
                                    290 	.globl __start__stack
                                    291 	.globl __mcs51_genXINIT
                                    292 	.globl __mcs51_genXRAMCLEAR
                                    293 	.globl __mcs51_genRAMCLEAR
                                    294 	.area GSFINAL (CODE)
      000000 02r00r46         [24]  295 	ljmp	__sdcc_program_startup
                                    296 ;--------------------------------------------------------
                                    297 ; Home
                                    298 ;--------------------------------------------------------
                                    299 	.area HOME    (CODE)
                                    300 	.area HOME    (CODE)
      000046                        301 __sdcc_program_startup:
      000046 02r00r00         [24]  302 	ljmp	_main
                                    303 ;	return from main will return to caller
                                    304 ;--------------------------------------------------------
                                    305 ; code
                                    306 ;--------------------------------------------------------
                                    307 	.area CSEG    (CODE)
                                    308 ;------------------------------------------------------------
                                    309 ;Allocation info for local variables in function 'main'
                                    310 ;------------------------------------------------------------
                                    311 ;tick                      Allocated to registers 
                                    312 ;------------------------------------------------------------
                                    313 ;	../main.c:26: void main(void)
                                    314 ;	-----------------------------------------
                                    315 ;	 function main
                                    316 ;	-----------------------------------------
      000000                        317 _main:
                           000007   318 	ar7 = 0x07
                           000006   319 	ar6 = 0x06
                           000005   320 	ar5 = 0x05
                           000004   321 	ar4 = 0x04
                           000003   322 	ar3 = 0x03
                           000002   323 	ar2 = 0x02
                           000001   324 	ar1 = 0x01
                           000000   325 	ar0 = 0x00
                                    326 ;	../main.c:32: CHIPCON = 0x50;
      000000 75 BF 50         [24]  327 	mov	_CHIPCON,#0x50
                                    328 ;	../main.c:33: PCLKSEL = 0x21;
      000003 75 B7 21         [24]  329 	mov	_PCLKSEL,#0x21
                                    330 ;	../main.c:34: EA = 1; //global interrupts enabled
                                    331 ;	assignBit
      000006 D2 AF            [12]  332 	setb	_EA
                                    333 ;	../main.c:35: P2_3 = 1; //enable programming
                                    334 ;	assignBit
      000008 D2 A3            [12]  335 	setb	_P2_3
                                    336 ;	../main.c:38: IAP_ADRH = (uint8_t) (RUNTIME_DATA_FLASH_SAVE_PAGE >> 8);
      00000A 75 E6 3F         [24]  337 	mov	_IAP_ADRH,#0x3f
                                    338 ;	../main.c:39: IAP_ADRL = (uint8_t) RUNTIME_DATA_FLASH_SAVE_PAGE;
      00000D 75 E5 C0         [24]  339 	mov	_IAP_ADRL,#0xc0
                                    340 ;	../main.c:40: save_load_settings(SLOT_0, LOAD);
      000010 75*00 00         [24]  341 	mov	_save_load_settings_PARM_2,#0x00
      000013 75 82 00         [24]  342 	mov	dpl,#0x00
      000016 12r00r00         [24]  343 	lcall	_save_load_settings
                                    344 ;	../main.c:43: P1_OPT = ADC0E | ADC3E; //enable adc input
      000019 75 D9 09         [24]  345 	mov	_P1_OPT,#0x09
                                    346 ;	../main.c:46: P3_4 = 1; //turn fogger off
                                    347 ;	assignBit
      00001C D2 B4            [12]  348 	setb	_P3_4
                                    349 ;	../main.c:47: P3_3 = 1;
                                    350 ;	assignBit
      00001E D2 B3            [12]  351 	setb	_P3_3
                                    352 ;	../main.c:50: tick_fogger();
      000020 12r00r00         [24]  353 	lcall	_tick_fogger
                                    354 ;	../main.c:54: SCK = 0;
                                    355 ;	assignBit
      000023 C2 93            [12]  356 	clr	_SCK
                                    357 ;	../main.c:55: SER = 0;
                                    358 ;	assignBit
      000025 C2 95            [12]  359 	clr	_SER
                                    360 ;	../main.c:56: RCK = 0;
                                    361 ;	assignBit
      000027 C2 92            [12]  362 	clr	_RCK
                                    363 ;	../main.c:58: exe_command(FUNCTION_SET);
      000029 90 3C 00         [24]  364 	mov	dptr,#0x3c00
      00002C 12r00r00         [24]  365 	lcall	_exe_command
                                    366 ;	../main.c:59: exe_command(ENTRY_MODE_SET);
      00002F 90 1E 00         [24]  367 	mov	dptr,#0x1e00
      000032 12r00r00         [24]  368 	lcall	_exe_command
                                    369 ;	../main.c:60: exe_command(CLEAR_DISPLAY);
      000035 90 80 00         [24]  370 	mov	dptr,#0x8000
      000038 12r00r00         [24]  371 	lcall	_exe_command
                                    372 ;	../main.c:61: exe_command(DISPLAY_ON);
      00003B 90 30 00         [24]  373 	mov	dptr,#0x3000
      00003E 12r00r00         [24]  374 	lcall	_exe_command
                                    375 ;	../main.c:64: exe_command(CGRAM_ADDRESS_SET); //selector
      000041 90 02 00         [24]  376 	mov	dptr,#0x0200
      000044 12r00r00         [24]  377 	lcall	_exe_command
                                    378 ;	../main.c:67: exe_command(0x8880);
      000047 90 88 80         [24]  379 	mov	dptr,#0x8880
      00004A 12r00r00         [24]  380 	lcall	_exe_command
                                    381 ;	../main.c:68: exe_command(0xF880);
      00004D 90 F8 80         [24]  382 	mov	dptr,#0xf880
      000050 12r00r00         [24]  383 	lcall	_exe_command
                                    384 ;	../main.c:69: exe_command(0x0080);
      000053 90 00 80         [24]  385 	mov	dptr,#0x0080
      000056 12r00r00         [24]  386 	lcall	_exe_command
                                    387 ;	../main.c:70: exe_command(0xF880);
      000059 90 F8 80         [24]  388 	mov	dptr,#0xf880
      00005C 12r00r00         [24]  389 	lcall	_exe_command
                                    390 ;	../main.c:71: exe_command(0xA080);
      00005F 90 A0 80         [24]  391 	mov	dptr,#0xa080
      000062 12r00r00         [24]  392 	lcall	_exe_command
                                    393 ;	../main.c:72: exe_command(0x0080);
      000065 90 00 80         [24]  394 	mov	dptr,#0x0080
      000068 12r00r00         [24]  395 	lcall	_exe_command
                                    396 ;	../main.c:73: exe_command(0xF880);
      00006B 90 F8 80         [24]  397 	mov	dptr,#0xf880
      00006E 12r00r00         [24]  398 	lcall	_exe_command
                                    399 ;	../main.c:74: exe_command(0xA080);
      000071 90 A0 80         [24]  400 	mov	dptr,#0xa080
      000074 12r00r00         [24]  401 	lcall	_exe_command
                                    402 ;	../main.c:77: exe_command(0x0080);
      000077 90 00 80         [24]  403 	mov	dptr,#0x0080
      00007A 12r00r00         [24]  404 	lcall	_exe_command
                                    405 ;	../main.c:78: exe_command(0x1080);
      00007D 90 10 80         [24]  406 	mov	dptr,#0x1080
      000080 12r00r00         [24]  407 	lcall	_exe_command
                                    408 ;	../main.c:79: exe_command(0x3080);
      000083 90 30 80         [24]  409 	mov	dptr,#0x3080
      000086 12r00r00         [24]  410 	lcall	_exe_command
                                    411 ;	../main.c:80: exe_command(0x7080);
      000089 90 70 80         [24]  412 	mov	dptr,#0x7080
      00008C 12r00r00         [24]  413 	lcall	_exe_command
                                    414 ;	../main.c:81: exe_command(0x3080);
      00008F 90 30 80         [24]  415 	mov	dptr,#0x3080
      000092 12r00r00         [24]  416 	lcall	_exe_command
                                    417 ;	../main.c:82: exe_command(0x1080);
      000095 90 10 80         [24]  418 	mov	dptr,#0x1080
      000098 12r00r00         [24]  419 	lcall	_exe_command
                                    420 ;	../main.c:83: exe_command(0x0080);
      00009B 90 00 80         [24]  421 	mov	dptr,#0x0080
      00009E 12r00r00         [24]  422 	lcall	_exe_command
                                    423 ;	../main.c:84: exe_command(0xF880);
      0000A1 90 F8 80         [24]  424 	mov	dptr,#0xf880
      0000A4 12r00r00         [24]  425 	lcall	_exe_command
                                    426 ;	../main.c:87: exe_command(0x0080);
      0000A7 90 00 80         [24]  427 	mov	dptr,#0x0080
      0000AA 12r00r00         [24]  428 	lcall	_exe_command
                                    429 ;	../main.c:88: exe_command(0x0080);
      0000AD 90 00 80         [24]  430 	mov	dptr,#0x0080
      0000B0 12r00r00         [24]  431 	lcall	_exe_command
                                    432 ;	../main.c:89: exe_command(0x0080);
      0000B3 90 00 80         [24]  433 	mov	dptr,#0x0080
      0000B6 12r00r00         [24]  434 	lcall	_exe_command
                                    435 ;	../main.c:90: exe_command(0x0080);
      0000B9 90 00 80         [24]  436 	mov	dptr,#0x0080
      0000BC 12r00r00         [24]  437 	lcall	_exe_command
                                    438 ;	../main.c:91: exe_command(0x0080);
      0000BF 90 00 80         [24]  439 	mov	dptr,#0x0080
      0000C2 12r00r00         [24]  440 	lcall	_exe_command
                                    441 ;	../main.c:92: exe_command(0x0080);
      0000C5 90 00 80         [24]  442 	mov	dptr,#0x0080
      0000C8 12r00r00         [24]  443 	lcall	_exe_command
                                    444 ;	../main.c:93: exe_command(0xF880);
      0000CB 90 F8 80         [24]  445 	mov	dptr,#0xf880
      0000CE 12r00r00         [24]  446 	lcall	_exe_command
                                    447 ;	../main.c:94: exe_command(0xF880);
      0000D1 90 F8 80         [24]  448 	mov	dptr,#0xf880
      0000D4 12r00r00         [24]  449 	lcall	_exe_command
                                    450 ;	../main.c:97: exe_command(0x0080);
      0000D7 90 00 80         [24]  451 	mov	dptr,#0x0080
      0000DA 12r00r00         [24]  452 	lcall	_exe_command
                                    453 ;	../main.c:98: exe_command(0x0080);
      0000DD 90 00 80         [24]  454 	mov	dptr,#0x0080
      0000E0 12r00r00         [24]  455 	lcall	_exe_command
                                    456 ;	../main.c:99: exe_command(0x0080);
      0000E3 90 00 80         [24]  457 	mov	dptr,#0x0080
      0000E6 12r00r00         [24]  458 	lcall	_exe_command
                                    459 ;	../main.c:100: exe_command(0x0080);
      0000E9 90 00 80         [24]  460 	mov	dptr,#0x0080
      0000EC 12r00r00         [24]  461 	lcall	_exe_command
                                    462 ;	../main.c:101: exe_command(0xF880);
      0000EF 90 F8 80         [24]  463 	mov	dptr,#0xf880
      0000F2 12r00r00         [24]  464 	lcall	_exe_command
                                    465 ;	../main.c:102: exe_command(0xF880);
      0000F5 90 F8 80         [24]  466 	mov	dptr,#0xf880
      0000F8 12r00r00         [24]  467 	lcall	_exe_command
                                    468 ;	../main.c:103: exe_command(0xF880);
      0000FB 90 F8 80         [24]  469 	mov	dptr,#0xf880
      0000FE 12r00r00         [24]  470 	lcall	_exe_command
                                    471 ;	../main.c:104: exe_command(0xF880);
      000101 90 F8 80         [24]  472 	mov	dptr,#0xf880
      000104 12r00r00         [24]  473 	lcall	_exe_command
                                    474 ;	../main.c:107: exe_command(0x0080);
      000107 90 00 80         [24]  475 	mov	dptr,#0x0080
      00010A 12r00r00         [24]  476 	lcall	_exe_command
                                    477 ;	../main.c:108: exe_command(0xF880);
      00010D 90 F8 80         [24]  478 	mov	dptr,#0xf880
      000110 12r00r00         [24]  479 	lcall	_exe_command
                                    480 ;	../main.c:109: exe_command(0xF880);
      000113 90 F8 80         [24]  481 	mov	dptr,#0xf880
      000116 12r00r00         [24]  482 	lcall	_exe_command
                                    483 ;	../main.c:110: exe_command(0xF880);
      000119 90 F8 80         [24]  484 	mov	dptr,#0xf880
      00011C 12r00r00         [24]  485 	lcall	_exe_command
                                    486 ;	../main.c:111: exe_command(0xF880);
      00011F 90 F8 80         [24]  487 	mov	dptr,#0xf880
      000122 12r00r00         [24]  488 	lcall	_exe_command
                                    489 ;	../main.c:112: exe_command(0xF880);
      000125 90 F8 80         [24]  490 	mov	dptr,#0xf880
      000128 12r00r00         [24]  491 	lcall	_exe_command
                                    492 ;	../main.c:113: exe_command(0xF880);
      00012B 90 F8 80         [24]  493 	mov	dptr,#0xf880
      00012E 12r00r00         [24]  494 	lcall	_exe_command
                                    495 ;	../main.c:114: exe_command(0xF880);
      000131 90 F8 80         [24]  496 	mov	dptr,#0xf880
      000134 12r00r00         [24]  497 	lcall	_exe_command
                                    498 ;	../main.c:117: exe_command(0x2080);
      000137 90 20 80         [24]  499 	mov	dptr,#0x2080
      00013A 12r00r00         [24]  500 	lcall	_exe_command
                                    501 ;	../main.c:118: exe_command(0x7080);
      00013D 90 70 80         [24]  502 	mov	dptr,#0x7080
      000140 12r00r00         [24]  503 	lcall	_exe_command
                                    504 ;	../main.c:119: exe_command(0x0080);
      000143 90 00 80         [24]  505 	mov	dptr,#0x0080
      000146 12r00r00         [24]  506 	lcall	_exe_command
                                    507 ;	../main.c:120: exe_command(0x5080);
      000149 90 50 80         [24]  508 	mov	dptr,#0x5080
      00014C 12r00r00         [24]  509 	lcall	_exe_command
                                    510 ;	../main.c:121: exe_command(0x7080);
      00014F 90 70 80         [24]  511 	mov	dptr,#0x7080
      000152 12r00r00         [24]  512 	lcall	_exe_command
                                    513 ;	../main.c:122: exe_command(0x5080);
      000155 90 50 80         [24]  514 	mov	dptr,#0x5080
      000158 12r00r00         [24]  515 	lcall	_exe_command
                                    516 ;	../main.c:123: exe_command(0x0080);
      00015B 90 00 80         [24]  517 	mov	dptr,#0x0080
      00015E 12r00r00         [24]  518 	lcall	_exe_command
                                    519 ;	../main.c:124: exe_command(0xF880);
      000161 90 F8 80         [24]  520 	mov	dptr,#0xf880
      000164 12r00r00         [24]  521 	lcall	_exe_command
                                    522 ;	../main.c:127: exe_command(0xF880);
      000167 90 F8 80         [24]  523 	mov	dptr,#0xf880
      00016A 12r00r00         [24]  524 	lcall	_exe_command
                                    525 ;	../main.c:128: exe_command(0x0080);
      00016D 90 00 80         [24]  526 	mov	dptr,#0x0080
      000170 12r00r00         [24]  527 	lcall	_exe_command
                                    528 ;	../main.c:129: exe_command(0x0080);
      000173 90 00 80         [24]  529 	mov	dptr,#0x0080
      000176 12r00r00         [24]  530 	lcall	_exe_command
                                    531 ;	../main.c:130: exe_command(0x5080);
      000179 90 50 80         [24]  532 	mov	dptr,#0x5080
      00017C 12r00r00         [24]  533 	lcall	_exe_command
                                    534 ;	../main.c:131: exe_command(0x7080);
      00017F 90 70 80         [24]  535 	mov	dptr,#0x7080
      000182 12r00r00         [24]  536 	lcall	_exe_command
                                    537 ;	../main.c:132: exe_command(0x5080);
      000185 90 50 80         [24]  538 	mov	dptr,#0x5080
      000188 12r00r00         [24]  539 	lcall	_exe_command
                                    540 ;	../main.c:133: exe_command(0x0080);
      00018B 90 00 80         [24]  541 	mov	dptr,#0x0080
      00018E 12r00r00         [24]  542 	lcall	_exe_command
                                    543 ;	../main.c:134: exe_command(0x0080);
      000191 90 00 80         [24]  544 	mov	dptr,#0x0080
      000194 12r00r00         [24]  545 	lcall	_exe_command
                                    546 ;	../main.c:137: exe_command(0x0080);
      000197 90 00 80         [24]  547 	mov	dptr,#0x0080
      00019A 12r00r00         [24]  548 	lcall	_exe_command
                                    549 ;	../main.c:138: exe_command(0xC080);
      00019D 90 C0 80         [24]  550 	mov	dptr,#0xc080
      0001A0 12r00r00         [24]  551 	lcall	_exe_command
                                    552 ;	../main.c:139: exe_command(0xD880);
      0001A3 90 D8 80         [24]  553 	mov	dptr,#0xd880
      0001A6 12r00r00         [24]  554 	lcall	_exe_command
                                    555 ;	../main.c:140: exe_command(0x0080);
      0001A9 90 00 80         [24]  556 	mov	dptr,#0x0080
      0001AC 12r00r00         [24]  557 	lcall	_exe_command
                                    558 ;	../main.c:141: exe_command(0x0080);
      0001AF 90 00 80         [24]  559 	mov	dptr,#0x0080
      0001B2 12r00r00         [24]  560 	lcall	_exe_command
                                    561 ;	../main.c:142: exe_command(0x8880); 
      0001B5 90 88 80         [24]  562 	mov	dptr,#0x8880
      0001B8 12r00r00         [24]  563 	lcall	_exe_command
                                    564 ;	../main.c:143: exe_command(0x7080);
      0001BB 90 70 80         [24]  565 	mov	dptr,#0x7080
      0001BE 12r00r00         [24]  566 	lcall	_exe_command
                                    567 ;	../main.c:144: exe_command(0x0080);
      0001C1 90 00 80         [24]  568 	mov	dptr,#0x0080
      0001C4 12r00r00         [24]  569 	lcall	_exe_command
                                    570 ;	../main.c:150: tick_ui();
      0001C7 12r00r00         [24]  571 	lcall	_tick_ui
                                    572 ;	../main.c:153: CKCON |= 0x08; //timer0
      0001CA AE 8E            [24]  573 	mov	r6,_CKCON
      0001CC 43 06 08         [24]  574 	orl	ar6,#0x08
      0001CF 8E 8E            [24]  575 	mov	_CKCON,r6
                                    576 ;	../main.c:154: TMOD = 0x00; //timer0 
      0001D1 75 89 00         [24]  577 	mov	_TMOD,#0x00
                                    578 ;	../main.c:155: ET0 = 1; //timer0
                                    579 ;	assignBit
      0001D4 D2 A9            [12]  580 	setb	_ET0
                                    581 ;	../main.c:158: blackout();
      0001D6 12r00r00         [24]  582 	lcall	_blackout
                                    583 ;	../main.c:159: PWM_EA1 = 0x48;
      0001D9 75 D3 48         [24]  584 	mov	_PWM_EA1,#0x48
                                    585 ;	../main.c:160: PWM_EA2 = 0x02;
      0001DC 75 D4 02         [24]  586 	mov	_PWM_EA2,#0x02
                                    587 ;	../main.c:163: while(tick--){}
      0001DF 7C DD            [12]  588 	mov	r4,#0xdd
      0001E1 7D 8A            [12]  589 	mov	r5,#0x8a
      0001E3 7E 14            [12]  590 	mov	r6,#0x14
      0001E5 7F 00            [12]  591 	mov	r7,#0x00
      0001E7                        592 00101$:
      0001E7 8C 00            [24]  593 	mov	ar0,r4
      0001E9 8D 01            [24]  594 	mov	ar1,r5
      0001EB 8E 02            [24]  595 	mov	ar2,r6
      0001ED 8F 03            [24]  596 	mov	ar3,r7
      0001EF 1C               [12]  597 	dec	r4
      0001F0 BC FF 09         [24]  598 	cjne	r4,#0xff,00140$
      0001F3 1D               [12]  599 	dec	r5
      0001F4 BD FF 05         [24]  600 	cjne	r5,#0xff,00140$
      0001F7 1E               [12]  601 	dec	r6
      0001F8 BE FF 01         [24]  602 	cjne	r6,#0xff,00140$
      0001FB 1F               [12]  603 	dec	r7
      0001FC                        604 00140$:
      0001FC E8               [12]  605 	mov	a,r0
      0001FD 49               [12]  606 	orl	a,r1
      0001FE 4A               [12]  607 	orl	a,r2
      0001FF 4B               [12]  608 	orl	a,r3
      000200 70 E5            [24]  609 	jnz	00101$
                                    610 ;	../main.c:167: SM0 = 1;
                                    611 ;	assignBit
      000202 D2 9F            [12]  612 	setb	_SM0
                                    613 ;	../main.c:168: SM1 = 1;
                                    614 ;	assignBit
      000204 D2 9E            [12]  615 	setb	_SM1
                                    616 ;	../main.c:169: SM2 = 1;
                                    617 ;	assignBit
      000206 D2 9D            [12]  618 	setb	_SM2
                                    619 ;	../main.c:170: REN = 1;
                                    620 ;	assignBit
      000208 D2 9C            [12]  621 	setb	_REN
                                    622 ;	../main.c:173: RCAP2L = BAUD_TIMER_LOW;
      00020A 75 CA FD         [24]  623 	mov	_RCAP2L,#0xfd
                                    624 ;	../main.c:174: RCAP2H = BAUD_TIMER_HIGH;
      00020D 75 CB FF         [24]  625 	mov	_RCAP2H,#0xff
                                    626 ;	../main.c:175: RCLK = 1;
                                    627 ;	assignBit
      000210 D2 CD            [12]  628 	setb	_RCLK
                                    629 ;	../main.c:176: TCLK = 1;
                                    630 ;	assignBit
      000212 D2 CC            [12]  631 	setb	_TCLK
                                    632 ;	../main.c:177: EXEN2 = 0; 
                                    633 ;	assignBit
      000214 C2 CB            [12]  634 	clr	_EXEN2
                                    635 ;	../main.c:178: TR2 = 1;
                                    636 ;	assignBit
      000216 D2 CA            [12]  637 	setb	_TR2
                                    638 ;	../main.c:179: CT2 = 0; 
                                    639 ;	assignBit
      000218 C2 C9            [12]  640 	clr	_CT2
                                    641 ;	../main.c:180: CPRL2 = 0;
                                    642 ;	assignBit
      00021A C2 C8            [12]  643 	clr	_CPRL2
                                    644 ;	../main.c:183: TH3 = BREAK_TIMER_RELOAD_HIGH;
      00021C 75 9B FC         [24]  645 	mov	_TH3,#0xfc
                                    646 ;	../main.c:184: TL3 = BREAK_TIMER_RELOAD_LOW;
      00021F 75 9A D0         [24]  647 	mov	_TL3,#0xd0
                                    648 ;	../main.c:187: EIE |= EIE_Timer3;
      000222 AA E8            [24]  649 	mov	r2,_EIE
      000224 43 02 01         [24]  650 	orl	ar2,#0x01
      000227 8A E8            [24]  651 	mov	_EIE,r2
                                    652 ;	../main.c:188: ES = 1;
                                    653 ;	assignBit
      000229 D2 AC            [12]  654 	setb	_ES
                                    655 ;	../main.c:193: P2_3 = 0;
                                    656 ;	assignBit
      00022B C2 A3            [12]  657 	clr	_P2_3
                                    658 ;	../main.c:195: power_heater(HEATER_DISABLE);
      00022D 75 82 01         [24]  659 	mov	dpl,#0x01
      000230 C0 07            [24]  660 	push	ar7
      000232 C0 06            [24]  661 	push	ar6
      000234 C0 05            [24]  662 	push	ar5
      000236 C0 04            [24]  663 	push	ar4
      000238 12r00r00         [24]  664 	lcall	_power_heater
      00023B D0 04            [24]  665 	pop	ar4
      00023D D0 05            [24]  666 	pop	ar5
      00023F D0 06            [24]  667 	pop	ar6
      000241 D0 07            [24]  668 	pop	ar7
                                    669 ;	../main.c:198: while(1){
      000243                        670 00111$:
                                    671 ;	../main.c:200: if(!(tick % FOGGER_FREQ)) { tick_fogger(); }
      000243 75*00 90         [24]  672 	mov	__modulong_PARM_2,#0x90
      000246 E4               [12]  673 	clr	a
      000247 F5*01            [12]  674 	mov	(__modulong_PARM_2 + 1),a
      000249 F5*02            [12]  675 	mov	(__modulong_PARM_2 + 2),a
      00024B F5*03            [12]  676 	mov	(__modulong_PARM_2 + 3),a
      00024D 8C 82            [24]  677 	mov	dpl,r4
      00024F 8D 83            [24]  678 	mov	dph,r5
      000251 8E F0            [24]  679 	mov	b,r6
      000253 EF               [12]  680 	mov	a,r7
      000254 C0 07            [24]  681 	push	ar7
      000256 C0 06            [24]  682 	push	ar6
      000258 C0 05            [24]  683 	push	ar5
      00025A C0 04            [24]  684 	push	ar4
      00025C 12r00r00         [24]  685 	lcall	__modulong
      00025F A8 82            [24]  686 	mov	r0,dpl
      000261 A9 83            [24]  687 	mov	r1,dph
      000263 AA F0            [24]  688 	mov	r2,b
      000265 FB               [12]  689 	mov	r3,a
      000266 D0 04            [24]  690 	pop	ar4
      000268 D0 05            [24]  691 	pop	ar5
      00026A D0 06            [24]  692 	pop	ar6
      00026C D0 07            [24]  693 	pop	ar7
      00026E E8               [12]  694 	mov	a,r0
      00026F 49               [12]  695 	orl	a,r1
      000270 4A               [12]  696 	orl	a,r2
      000271 4B               [12]  697 	orl	a,r3
      000272 70 13            [24]  698 	jnz	00105$
      000274 C0 07            [24]  699 	push	ar7
      000276 C0 06            [24]  700 	push	ar6
      000278 C0 05            [24]  701 	push	ar5
      00027A C0 04            [24]  702 	push	ar4
      00027C 12r00r00         [24]  703 	lcall	_tick_fogger
      00027F D0 04            [24]  704 	pop	ar4
      000281 D0 05            [24]  705 	pop	ar5
      000283 D0 06            [24]  706 	pop	ar6
      000285 D0 07            [24]  707 	pop	ar7
      000287                        708 00105$:
                                    709 ;	../main.c:202: if(!(tick % WIRELESS_FREQ)) { tick_wireless(); }
      000287 75*00 59         [24]  710 	mov	__modulong_PARM_2,#0x59
      00028A E4               [12]  711 	clr	a
      00028B F5*01            [12]  712 	mov	(__modulong_PARM_2 + 1),a
      00028D F5*02            [12]  713 	mov	(__modulong_PARM_2 + 2),a
      00028F F5*03            [12]  714 	mov	(__modulong_PARM_2 + 3),a
      000291 8C 82            [24]  715 	mov	dpl,r4
      000293 8D 83            [24]  716 	mov	dph,r5
      000295 8E F0            [24]  717 	mov	b,r6
      000297 EF               [12]  718 	mov	a,r7
      000298 C0 07            [24]  719 	push	ar7
      00029A C0 06            [24]  720 	push	ar6
      00029C C0 05            [24]  721 	push	ar5
      00029E C0 04            [24]  722 	push	ar4
      0002A0 12r00r00         [24]  723 	lcall	__modulong
      0002A3 A8 82            [24]  724 	mov	r0,dpl
      0002A5 A9 83            [24]  725 	mov	r1,dph
      0002A7 AA F0            [24]  726 	mov	r2,b
      0002A9 FB               [12]  727 	mov	r3,a
      0002AA D0 04            [24]  728 	pop	ar4
      0002AC D0 05            [24]  729 	pop	ar5
      0002AE D0 06            [24]  730 	pop	ar6
      0002B0 D0 07            [24]  731 	pop	ar7
      0002B2 E8               [12]  732 	mov	a,r0
      0002B3 49               [12]  733 	orl	a,r1
      0002B4 4A               [12]  734 	orl	a,r2
      0002B5 4B               [12]  735 	orl	a,r3
      0002B6 70 13            [24]  736 	jnz	00107$
      0002B8 C0 07            [24]  737 	push	ar7
      0002BA C0 06            [24]  738 	push	ar6
      0002BC C0 05            [24]  739 	push	ar5
      0002BE C0 04            [24]  740 	push	ar4
      0002C0 12r00r00         [24]  741 	lcall	_tick_wireless
      0002C3 D0 04            [24]  742 	pop	ar4
      0002C5 D0 05            [24]  743 	pop	ar5
      0002C7 D0 06            [24]  744 	pop	ar6
      0002C9 D0 07            [24]  745 	pop	ar7
      0002CB                        746 00107$:
                                    747 ;	../main.c:204: if(!(tick % UI_FREQ)) { tick_ui(); }
      0002CB 75*00 03         [24]  748 	mov	__modulong_PARM_2,#0x03
      0002CE E4               [12]  749 	clr	a
      0002CF F5*01            [12]  750 	mov	(__modulong_PARM_2 + 1),a
      0002D1 F5*02            [12]  751 	mov	(__modulong_PARM_2 + 2),a
      0002D3 F5*03            [12]  752 	mov	(__modulong_PARM_2 + 3),a
      0002D5 8C 82            [24]  753 	mov	dpl,r4
      0002D7 8D 83            [24]  754 	mov	dph,r5
      0002D9 8E F0            [24]  755 	mov	b,r6
      0002DB EF               [12]  756 	mov	a,r7
      0002DC C0 07            [24]  757 	push	ar7
      0002DE C0 06            [24]  758 	push	ar6
      0002E0 C0 05            [24]  759 	push	ar5
      0002E2 C0 04            [24]  760 	push	ar4
      0002E4 12r00r00         [24]  761 	lcall	__modulong
      0002E7 A8 82            [24]  762 	mov	r0,dpl
      0002E9 A9 83            [24]  763 	mov	r1,dph
      0002EB AA F0            [24]  764 	mov	r2,b
      0002ED FB               [12]  765 	mov	r3,a
      0002EE D0 04            [24]  766 	pop	ar4
      0002F0 D0 05            [24]  767 	pop	ar5
      0002F2 D0 06            [24]  768 	pop	ar6
      0002F4 D0 07            [24]  769 	pop	ar7
      0002F6 E8               [12]  770 	mov	a,r0
      0002F7 49               [12]  771 	orl	a,r1
      0002F8 4A               [12]  772 	orl	a,r2
      0002F9 4B               [12]  773 	orl	a,r3
      0002FA 70 13            [24]  774 	jnz	00109$
      0002FC C0 07            [24]  775 	push	ar7
      0002FE C0 06            [24]  776 	push	ar6
      000300 C0 05            [24]  777 	push	ar5
      000302 C0 04            [24]  778 	push	ar4
      000304 12r00r00         [24]  779 	lcall	_tick_ui
      000307 D0 04            [24]  780 	pop	ar4
      000309 D0 05            [24]  781 	pop	ar5
      00030B D0 06            [24]  782 	pop	ar6
      00030D D0 07            [24]  783 	pop	ar7
      00030F                        784 00109$:
                                    785 ;	../main.c:206: tick_led(tick++);      
      00030F 8C 00            [24]  786 	mov	ar0,r4
      000311 8D 01            [24]  787 	mov	ar1,r5
      000313 8E 02            [24]  788 	mov	ar2,r6
      000315 8F 03            [24]  789 	mov	ar3,r7
      000317 0C               [12]  790 	inc	r4
      000318 BC 00 09         [24]  791 	cjne	r4,#0x00,00145$
      00031B 0D               [12]  792 	inc	r5
      00031C BD 00 05         [24]  793 	cjne	r5,#0x00,00145$
      00031F 0E               [12]  794 	inc	r6
      000320 BE 00 01         [24]  795 	cjne	r6,#0x00,00145$
      000323 0F               [12]  796 	inc	r7
      000324                        797 00145$:
      000324 88 82            [24]  798 	mov	dpl,r0
      000326 89 83            [24]  799 	mov	dph,r1
      000328 8A F0            [24]  800 	mov	b,r2
      00032A EB               [12]  801 	mov	a,r3
      00032B C0 07            [24]  802 	push	ar7
      00032D C0 06            [24]  803 	push	ar6
      00032F C0 05            [24]  804 	push	ar5
      000331 C0 04            [24]  805 	push	ar4
      000333 12r00r00         [24]  806 	lcall	_tick_led
      000336 D0 04            [24]  807 	pop	ar4
      000338 D0 05            [24]  808 	pop	ar5
      00033A D0 06            [24]  809 	pop	ar6
      00033C D0 07            [24]  810 	pop	ar7
                                    811 ;	../main.c:208: }
      00033E 02r02r43         [24]  812 	ljmp	00111$
                                    813 	.area CSEG    (CODE)
                                    814 	.area CONST   (CODE)
                                    815 	.area XINIT   (CODE)
                                    816 	.area CABS    (ABS,CODE)
